// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserReceivedMessage is an object representing the database table.
type UserReceivedMessage struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MessageID  int       `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	ReceivedAt time.Time `boil:"received_at" json:"received_at" toml:"received_at" yaml:"received_at"`
	ReadAt     null.Time `boil:"read_at" json:"read_at,omitempty" toml:"read_at" yaml:"read_at,omitempty"`

	R *userReceivedMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userReceivedMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserReceivedMessageColumns = struct {
	ID         string
	UserID     string
	MessageID  string
	ReceivedAt string
	ReadAt     string
}{
	ID:         "id",
	UserID:     "user_id",
	MessageID:  "message_id",
	ReceivedAt: "received_at",
	ReadAt:     "read_at",
}

// Generated where

var UserReceivedMessageWhere = struct {
	ID         whereHelperint
	UserID     whereHelperint
	MessageID  whereHelperint
	ReceivedAt whereHelpertime_Time
	ReadAt     whereHelpernull_Time
}{
	ID:         whereHelperint{field: "\"user_received_message\".\"id\""},
	UserID:     whereHelperint{field: "\"user_received_message\".\"user_id\""},
	MessageID:  whereHelperint{field: "\"user_received_message\".\"message_id\""},
	ReceivedAt: whereHelpertime_Time{field: "\"user_received_message\".\"received_at\""},
	ReadAt:     whereHelpernull_Time{field: "\"user_received_message\".\"read_at\""},
}

// UserReceivedMessageRels is where relationship names are stored.
var UserReceivedMessageRels = struct {
	Message string
	User    string
}{
	Message: "Message",
	User:    "User",
}

// userReceivedMessageR is where relationships are stored.
type userReceivedMessageR struct {
	Message *Message `boil:"Message" json:"Message" toml:"Message" yaml:"Message"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userReceivedMessageR) NewStruct() *userReceivedMessageR {
	return &userReceivedMessageR{}
}

// userReceivedMessageL is where Load methods for each relationship are stored.
type userReceivedMessageL struct{}

var (
	userReceivedMessageAllColumns            = []string{"id", "user_id", "message_id", "received_at", "read_at"}
	userReceivedMessageColumnsWithoutDefault = []string{"user_id", "message_id", "received_at", "read_at"}
	userReceivedMessageColumnsWithDefault    = []string{"id"}
	userReceivedMessagePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserReceivedMessageSlice is an alias for a slice of pointers to UserReceivedMessage.
	// This should generally be used opposed to []UserReceivedMessage.
	UserReceivedMessageSlice []*UserReceivedMessage
	// UserReceivedMessageHook is the signature for custom UserReceivedMessage hook methods
	UserReceivedMessageHook func(context.Context, boil.ContextExecutor, *UserReceivedMessage) error

	userReceivedMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userReceivedMessageType                 = reflect.TypeOf(&UserReceivedMessage{})
	userReceivedMessageMapping              = queries.MakeStructMapping(userReceivedMessageType)
	userReceivedMessagePrimaryKeyMapping, _ = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, userReceivedMessagePrimaryKeyColumns)
	userReceivedMessageInsertCacheMut       sync.RWMutex
	userReceivedMessageInsertCache          = make(map[string]insertCache)
	userReceivedMessageUpdateCacheMut       sync.RWMutex
	userReceivedMessageUpdateCache          = make(map[string]updateCache)
	userReceivedMessageUpsertCacheMut       sync.RWMutex
	userReceivedMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userReceivedMessageBeforeInsertHooks []UserReceivedMessageHook
var userReceivedMessageBeforeUpdateHooks []UserReceivedMessageHook
var userReceivedMessageBeforeDeleteHooks []UserReceivedMessageHook
var userReceivedMessageBeforeUpsertHooks []UserReceivedMessageHook

var userReceivedMessageAfterInsertHooks []UserReceivedMessageHook
var userReceivedMessageAfterSelectHooks []UserReceivedMessageHook
var userReceivedMessageAfterUpdateHooks []UserReceivedMessageHook
var userReceivedMessageAfterDeleteHooks []UserReceivedMessageHook
var userReceivedMessageAfterUpsertHooks []UserReceivedMessageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserReceivedMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserReceivedMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserReceivedMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserReceivedMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserReceivedMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserReceivedMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserReceivedMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserReceivedMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserReceivedMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReceivedMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserReceivedMessageHook registers your hook function for all future operations.
func AddUserReceivedMessageHook(hookPoint boil.HookPoint, userReceivedMessageHook UserReceivedMessageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userReceivedMessageBeforeInsertHooks = append(userReceivedMessageBeforeInsertHooks, userReceivedMessageHook)
	case boil.BeforeUpdateHook:
		userReceivedMessageBeforeUpdateHooks = append(userReceivedMessageBeforeUpdateHooks, userReceivedMessageHook)
	case boil.BeforeDeleteHook:
		userReceivedMessageBeforeDeleteHooks = append(userReceivedMessageBeforeDeleteHooks, userReceivedMessageHook)
	case boil.BeforeUpsertHook:
		userReceivedMessageBeforeUpsertHooks = append(userReceivedMessageBeforeUpsertHooks, userReceivedMessageHook)
	case boil.AfterInsertHook:
		userReceivedMessageAfterInsertHooks = append(userReceivedMessageAfterInsertHooks, userReceivedMessageHook)
	case boil.AfterSelectHook:
		userReceivedMessageAfterSelectHooks = append(userReceivedMessageAfterSelectHooks, userReceivedMessageHook)
	case boil.AfterUpdateHook:
		userReceivedMessageAfterUpdateHooks = append(userReceivedMessageAfterUpdateHooks, userReceivedMessageHook)
	case boil.AfterDeleteHook:
		userReceivedMessageAfterDeleteHooks = append(userReceivedMessageAfterDeleteHooks, userReceivedMessageHook)
	case boil.AfterUpsertHook:
		userReceivedMessageAfterUpsertHooks = append(userReceivedMessageAfterUpsertHooks, userReceivedMessageHook)
	}
}

// One returns a single userReceivedMessage record from the query.
func (q userReceivedMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserReceivedMessage, error) {
	o := &UserReceivedMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_received_message")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserReceivedMessage records from the query.
func (q userReceivedMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserReceivedMessageSlice, error) {
	var o []*UserReceivedMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserReceivedMessage slice")
	}

	if len(userReceivedMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserReceivedMessage records in the query.
func (q userReceivedMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_received_message rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userReceivedMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_received_message exists")
	}

	return count > 0, nil
}

// Message pointed to by the foreign key.
func (o *UserReceivedMessage) Message(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MessageID),
	}

	queryMods = append(queryMods, mods...)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserReceivedMessage) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userReceivedMessageL) LoadMessage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserReceivedMessage interface{}, mods queries.Applicator) error {
	var slice []*UserReceivedMessage
	var object *UserReceivedMessage

	if singular {
		object = maybeUserReceivedMessage.(*UserReceivedMessage)
	} else {
		slice = *maybeUserReceivedMessage.(*[]*UserReceivedMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userReceivedMessageR{}
		}
		args = append(args, object.MessageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userReceivedMessageR{}
			}

			for _, a := range args {
				if a == obj.MessageID {
					continue Outer
				}
			}

			args = append(args, obj.MessageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(userReceivedMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Message = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.UserReceivedMessages = append(foreign.R.UserReceivedMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageID == foreign.ID {
				local.R.Message = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.UserReceivedMessages = append(foreign.R.UserReceivedMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userReceivedMessageL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserReceivedMessage interface{}, mods queries.Applicator) error {
	var slice []*UserReceivedMessage
	var object *UserReceivedMessage

	if singular {
		object = maybeUserReceivedMessage.(*UserReceivedMessage)
	} else {
		slice = *maybeUserReceivedMessage.(*[]*UserReceivedMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userReceivedMessageR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userReceivedMessageR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userReceivedMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserReceivedMessages = append(foreign.R.UserReceivedMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserReceivedMessages = append(foreign.R.UserReceivedMessages, local)
				break
			}
		}
	}

	return nil
}

// SetMessage of the userReceivedMessage to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.UserReceivedMessages.
func (o *UserReceivedMessage) SetMessage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_received_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"message_id"}),
		strmangle.WhereClause("\"", "\"", 2, userReceivedMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageID = related.ID
	if o.R == nil {
		o.R = &userReceivedMessageR{
			Message: related,
		}
	} else {
		o.R.Message = related
	}

	if related.R == nil {
		related.R = &messageR{
			UserReceivedMessages: UserReceivedMessageSlice{o},
		}
	} else {
		related.R.UserReceivedMessages = append(related.R.UserReceivedMessages, o)
	}

	return nil
}

// SetUser of the userReceivedMessage to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserReceivedMessages.
func (o *UserReceivedMessage) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_received_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userReceivedMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userReceivedMessageR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserReceivedMessages: UserReceivedMessageSlice{o},
		}
	} else {
		related.R.UserReceivedMessages = append(related.R.UserReceivedMessages, o)
	}

	return nil
}

// UserReceivedMessages retrieves all the records using an executor.
func UserReceivedMessages(mods ...qm.QueryMod) userReceivedMessageQuery {
	mods = append(mods, qm.From("\"user_received_message\""))
	return userReceivedMessageQuery{NewQuery(mods...)}
}

// FindUserReceivedMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserReceivedMessage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserReceivedMessage, error) {
	userReceivedMessageObj := &UserReceivedMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_received_message\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userReceivedMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_received_message")
	}

	return userReceivedMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserReceivedMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_received_message provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userReceivedMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userReceivedMessageInsertCacheMut.RLock()
	cache, cached := userReceivedMessageInsertCache[key]
	userReceivedMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userReceivedMessageAllColumns,
			userReceivedMessageColumnsWithDefault,
			userReceivedMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_received_message\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_received_message\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_received_message")
	}

	if !cached {
		userReceivedMessageInsertCacheMut.Lock()
		userReceivedMessageInsertCache[key] = cache
		userReceivedMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserReceivedMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserReceivedMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userReceivedMessageUpdateCacheMut.RLock()
	cache, cached := userReceivedMessageUpdateCache[key]
	userReceivedMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userReceivedMessageAllColumns,
			userReceivedMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_received_message, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_received_message\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userReceivedMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, append(wl, userReceivedMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_received_message row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_received_message")
	}

	if !cached {
		userReceivedMessageUpdateCacheMut.Lock()
		userReceivedMessageUpdateCache[key] = cache
		userReceivedMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userReceivedMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_received_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_received_message")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserReceivedMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReceivedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_received_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userReceivedMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userReceivedMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userReceivedMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserReceivedMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_received_message provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userReceivedMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userReceivedMessageUpsertCacheMut.RLock()
	cache, cached := userReceivedMessageUpsertCache[key]
	userReceivedMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userReceivedMessageAllColumns,
			userReceivedMessageColumnsWithDefault,
			userReceivedMessageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userReceivedMessageAllColumns,
			userReceivedMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_received_message, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userReceivedMessagePrimaryKeyColumns))
			copy(conflict, userReceivedMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_received_message\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userReceivedMessageType, userReceivedMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_received_message")
	}

	if !cached {
		userReceivedMessageUpsertCacheMut.Lock()
		userReceivedMessageUpsertCache[key] = cache
		userReceivedMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserReceivedMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserReceivedMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserReceivedMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userReceivedMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"user_received_message\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_received_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_received_message")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userReceivedMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userReceivedMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_received_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_received_message")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserReceivedMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userReceivedMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReceivedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_received_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userReceivedMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userReceivedMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_received_message")
	}

	if len(userReceivedMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserReceivedMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserReceivedMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserReceivedMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserReceivedMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReceivedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_received_message\".* FROM \"user_received_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userReceivedMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserReceivedMessageSlice")
	}

	*o = slice

	return nil
}

// UserReceivedMessageExists checks if the UserReceivedMessage row exists.
func UserReceivedMessageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_received_message\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_received_message exists")
	}

	return exists, nil
}
