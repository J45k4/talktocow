// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiaryEntryComments(t *testing.T) {
	t.Parallel()

	query := DiaryEntryComments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiaryEntryCommentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntryCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiaryEntryComments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntryCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryEntryCommentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntryCommentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiaryEntryCommentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DiaryEntryComment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiaryEntryCommentExists to return true, but got false.")
	}
}

func testDiaryEntryCommentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	diaryEntryCommentFound, err := FindDiaryEntryComment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if diaryEntryCommentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiaryEntryCommentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiaryEntryComments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiaryEntryCommentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiaryEntryComments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiaryEntryCommentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	diaryEntryCommentOne := &DiaryEntryComment{}
	diaryEntryCommentTwo := &DiaryEntryComment{}
	if err = randomize.Struct(seed, diaryEntryCommentOne, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryEntryCommentTwo, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryEntryCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryEntryCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryEntryComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiaryEntryCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	diaryEntryCommentOne := &DiaryEntryComment{}
	diaryEntryCommentTwo := &DiaryEntryComment{}
	if err = randomize.Struct(seed, diaryEntryCommentOne, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryEntryCommentTwo, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryEntryCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryEntryCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func diaryEntryCommentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func diaryEntryCommentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntryComment) error {
	*o = DiaryEntryComment{}
	return nil
}

func testDiaryEntryCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiaryEntryComment{}
	o := &DiaryEntryComment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment object: %s", err)
	}

	AddDiaryEntryCommentHook(boil.BeforeInsertHook, diaryEntryCommentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentBeforeInsertHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.AfterInsertHook, diaryEntryCommentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentAfterInsertHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.AfterSelectHook, diaryEntryCommentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentAfterSelectHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.BeforeUpdateHook, diaryEntryCommentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentBeforeUpdateHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.AfterUpdateHook, diaryEntryCommentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentAfterUpdateHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.BeforeDeleteHook, diaryEntryCommentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentBeforeDeleteHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.AfterDeleteHook, diaryEntryCommentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentAfterDeleteHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.BeforeUpsertHook, diaryEntryCommentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentBeforeUpsertHooks = []DiaryEntryCommentHook{}

	AddDiaryEntryCommentHook(boil.AfterUpsertHook, diaryEntryCommentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryCommentAfterUpsertHooks = []DiaryEntryCommentHook{}
}

func testDiaryEntryCommentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryEntryCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(diaryEntryCommentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryEntryCommentToOneDiaryEntryUsingDiaryEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiaryEntryComment
	var foreign DiaryEntry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DiaryEntryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DiaryEntry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiaryEntryCommentSlice{&local}
	if err = local.L.LoadDiaryEntry(ctx, tx, false, (*[]*DiaryEntryComment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiaryEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DiaryEntry = nil
	if err = local.L.LoadDiaryEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiaryEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiaryEntryCommentToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiaryEntryComment
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiaryEntryCommentSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*DiaryEntryComment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiaryEntryCommentToOneSetOpDiaryEntryUsingDiaryEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntryComment
	var b, c DiaryEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryCommentDBTypes, false, strmangle.SetComplement(diaryEntryCommentPrimaryKeyColumns, diaryEntryCommentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, diaryEntryDBTypes, false, strmangle.SetComplement(diaryEntryPrimaryKeyColumns, diaryEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryEntryDBTypes, false, strmangle.SetComplement(diaryEntryPrimaryKeyColumns, diaryEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DiaryEntry{&b, &c} {
		err = a.SetDiaryEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DiaryEntry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiaryEntryComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DiaryEntryID != x.ID {
			t.Error("foreign key was wrong value", a.DiaryEntryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiaryEntryID))
		reflect.Indirect(reflect.ValueOf(&a.DiaryEntryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DiaryEntryID != x.ID {
			t.Error("foreign key was wrong value", a.DiaryEntryID, x.ID)
		}
	}
}
func testDiaryEntryCommentToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntryComment
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryCommentDBTypes, false, strmangle.SetComplement(diaryEntryCommentPrimaryKeyColumns, diaryEntryCommentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiaryEntryComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testDiaryEntryCommentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryEntryCommentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryEntryCommentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryEntryCommentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryEntryComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	diaryEntryCommentDBTypes = map[string]string{`ID`: `integer`, `CommentText`: `text`, `DiaryEntryID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `UserID`: `integer`}
	_                        = bytes.MinRead
)

func testDiaryEntryCommentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(diaryEntryCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(diaryEntryCommentAllColumns) == len(diaryEntryCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiaryEntryCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(diaryEntryCommentAllColumns) == len(diaryEntryCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntryComment{}
	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryEntryCommentDBTypes, true, diaryEntryCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(diaryEntryCommentAllColumns, diaryEntryCommentPrimaryKeyColumns) {
		fields = diaryEntryCommentAllColumns
	} else {
		fields = strmangle.SetComplement(
			diaryEntryCommentAllColumns,
			diaryEntryCommentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiaryEntryCommentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiaryEntryCommentsUpsert(t *testing.T) {
	t.Parallel()

	if len(diaryEntryCommentAllColumns) == len(diaryEntryCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiaryEntryComment{}
	if err = randomize.Struct(seed, &o, diaryEntryCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryEntryComment: %s", err)
	}

	count, err := DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, diaryEntryCommentDBTypes, false, diaryEntryCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntryComment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryEntryComment: %s", err)
	}

	count, err = DiaryEntryComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
