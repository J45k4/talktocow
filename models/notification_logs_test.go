// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNotificationLogs(t *testing.T) {
	t.Parallel()

	query := NotificationLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNotificationLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NotificationLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotificationLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NotificationLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NotificationLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotificationLogExists to return true, but got false.")
	}
}

func testNotificationLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	notificationLogFound, err := FindNotificationLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if notificationLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNotificationLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NotificationLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNotificationLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NotificationLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotificationLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notificationLogOne := &NotificationLog{}
	notificationLogTwo := &NotificationLog{}
	if err = randomize.Struct(seed, notificationLogOne, notificationLogDBTypes, false, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationLogTwo, notificationLogDBTypes, false, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notificationLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notificationLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotificationLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotificationLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notificationLogOne := &NotificationLog{}
	notificationLogTwo := &NotificationLog{}
	if err = randomize.Struct(seed, notificationLogOne, notificationLogDBTypes, false, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationLogTwo, notificationLogDBTypes, false, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = notificationLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = notificationLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func notificationLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func notificationLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NotificationLog) error {
	*o = NotificationLog{}
	return nil
}

func testNotificationLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NotificationLog{}
	o := &NotificationLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, notificationLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NotificationLog object: %s", err)
	}

	AddNotificationLogHook(boil.BeforeInsertHook, notificationLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	notificationLogBeforeInsertHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.AfterInsertHook, notificationLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	notificationLogAfterInsertHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.AfterSelectHook, notificationLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	notificationLogAfterSelectHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.BeforeUpdateHook, notificationLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	notificationLogBeforeUpdateHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.AfterUpdateHook, notificationLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	notificationLogAfterUpdateHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.BeforeDeleteHook, notificationLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	notificationLogBeforeDeleteHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.AfterDeleteHook, notificationLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	notificationLogAfterDeleteHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.BeforeUpsertHook, notificationLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	notificationLogBeforeUpsertHooks = []NotificationLogHook{}

	AddNotificationLogHook(boil.AfterUpsertHook, notificationLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	notificationLogAfterUpsertHooks = []NotificationLogHook{}
}

func testNotificationLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(notificationLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotificationLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NotificationLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNotificationLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NotificationLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notificationLogDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `Message`: `text`, `NotificationType`: `integer`, `CreatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testNotificationLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(notificationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(notificationLogAllColumns) == len(notificationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNotificationLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notificationLogAllColumns) == len(notificationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NotificationLog{}
	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, notificationLogDBTypes, true, notificationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notificationLogAllColumns, notificationLogPrimaryKeyColumns) {
		fields = notificationLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			notificationLogAllColumns,
			notificationLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NotificationLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNotificationLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(notificationLogAllColumns) == len(notificationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NotificationLog{}
	if err = randomize.Struct(seed, &o, notificationLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotificationLog: %s", err)
	}

	count, err := NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, notificationLogDBTypes, false, notificationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NotificationLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NotificationLog: %s", err)
	}

	count, err = NotificationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
