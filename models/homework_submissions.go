// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HomeworkSubmission is an object representing the database table.
type HomeworkSubmission struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	HomeworkID int       `boil:"homework_id" json:"homework_id" toml:"homework_id" yaml:"homework_id"`
	UserID     int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Submission string    `boil:"submission" json:"submission" toml:"submission" yaml:"submission"`
	Status     null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *homeworkSubmissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L homeworkSubmissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HomeworkSubmissionColumns = struct {
	ID         string
	HomeworkID string
	UserID     string
	Submission string
	Status     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	HomeworkID: "homework_id",
	UserID:     "user_id",
	Submission: "submission",
	Status:     "status",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var HomeworkSubmissionTableColumns = struct {
	ID         string
	HomeworkID string
	UserID     string
	Submission string
	Status     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "homework_submissions.id",
	HomeworkID: "homework_submissions.homework_id",
	UserID:     "homework_submissions.user_id",
	Submission: "homework_submissions.submission",
	Status:     "homework_submissions.status",
	CreatedAt:  "homework_submissions.created_at",
	UpdatedAt:  "homework_submissions.updated_at",
}

// Generated where

var HomeworkSubmissionWhere = struct {
	ID         whereHelperint
	HomeworkID whereHelperint
	UserID     whereHelperint
	Submission whereHelperstring
	Status     whereHelpernull_Int
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint{field: "\"homework_submissions\".\"id\""},
	HomeworkID: whereHelperint{field: "\"homework_submissions\".\"homework_id\""},
	UserID:     whereHelperint{field: "\"homework_submissions\".\"user_id\""},
	Submission: whereHelperstring{field: "\"homework_submissions\".\"submission\""},
	Status:     whereHelpernull_Int{field: "\"homework_submissions\".\"status\""},
	CreatedAt:  whereHelpertime_Time{field: "\"homework_submissions\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"homework_submissions\".\"updated_at\""},
}

// HomeworkSubmissionRels is where relationship names are stored.
var HomeworkSubmissionRels = struct {
	Homework                   string
	User                       string
	HomeworkSubmissionComments string
}{
	Homework:                   "Homework",
	User:                       "User",
	HomeworkSubmissionComments: "HomeworkSubmissionComments",
}

// homeworkSubmissionR is where relationships are stored.
type homeworkSubmissionR struct {
	Homework                   *Homework                      `boil:"Homework" json:"Homework" toml:"Homework" yaml:"Homework"`
	User                       *User                          `boil:"User" json:"User" toml:"User" yaml:"User"`
	HomeworkSubmissionComments HomeworkSubmissionCommentSlice `boil:"HomeworkSubmissionComments" json:"HomeworkSubmissionComments" toml:"HomeworkSubmissionComments" yaml:"HomeworkSubmissionComments"`
}

// NewStruct creates a new relationship struct
func (*homeworkSubmissionR) NewStruct() *homeworkSubmissionR {
	return &homeworkSubmissionR{}
}

// homeworkSubmissionL is where Load methods for each relationship are stored.
type homeworkSubmissionL struct{}

var (
	homeworkSubmissionAllColumns            = []string{"id", "homework_id", "user_id", "submission", "status", "created_at", "updated_at"}
	homeworkSubmissionColumnsWithoutDefault = []string{"homework_id", "user_id", "submission", "created_at", "updated_at"}
	homeworkSubmissionColumnsWithDefault    = []string{"id", "status"}
	homeworkSubmissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// HomeworkSubmissionSlice is an alias for a slice of pointers to HomeworkSubmission.
	// This should almost always be used instead of []HomeworkSubmission.
	HomeworkSubmissionSlice []*HomeworkSubmission
	// HomeworkSubmissionHook is the signature for custom HomeworkSubmission hook methods
	HomeworkSubmissionHook func(context.Context, boil.ContextExecutor, *HomeworkSubmission) error

	homeworkSubmissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	homeworkSubmissionType                 = reflect.TypeOf(&HomeworkSubmission{})
	homeworkSubmissionMapping              = queries.MakeStructMapping(homeworkSubmissionType)
	homeworkSubmissionPrimaryKeyMapping, _ = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, homeworkSubmissionPrimaryKeyColumns)
	homeworkSubmissionInsertCacheMut       sync.RWMutex
	homeworkSubmissionInsertCache          = make(map[string]insertCache)
	homeworkSubmissionUpdateCacheMut       sync.RWMutex
	homeworkSubmissionUpdateCache          = make(map[string]updateCache)
	homeworkSubmissionUpsertCacheMut       sync.RWMutex
	homeworkSubmissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var homeworkSubmissionBeforeInsertHooks []HomeworkSubmissionHook
var homeworkSubmissionBeforeUpdateHooks []HomeworkSubmissionHook
var homeworkSubmissionBeforeDeleteHooks []HomeworkSubmissionHook
var homeworkSubmissionBeforeUpsertHooks []HomeworkSubmissionHook

var homeworkSubmissionAfterInsertHooks []HomeworkSubmissionHook
var homeworkSubmissionAfterSelectHooks []HomeworkSubmissionHook
var homeworkSubmissionAfterUpdateHooks []HomeworkSubmissionHook
var homeworkSubmissionAfterDeleteHooks []HomeworkSubmissionHook
var homeworkSubmissionAfterUpsertHooks []HomeworkSubmissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HomeworkSubmission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HomeworkSubmission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HomeworkSubmission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HomeworkSubmission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HomeworkSubmission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HomeworkSubmission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HomeworkSubmission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HomeworkSubmission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HomeworkSubmission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range homeworkSubmissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHomeworkSubmissionHook registers your hook function for all future operations.
func AddHomeworkSubmissionHook(hookPoint boil.HookPoint, homeworkSubmissionHook HomeworkSubmissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		homeworkSubmissionBeforeInsertHooks = append(homeworkSubmissionBeforeInsertHooks, homeworkSubmissionHook)
	case boil.BeforeUpdateHook:
		homeworkSubmissionBeforeUpdateHooks = append(homeworkSubmissionBeforeUpdateHooks, homeworkSubmissionHook)
	case boil.BeforeDeleteHook:
		homeworkSubmissionBeforeDeleteHooks = append(homeworkSubmissionBeforeDeleteHooks, homeworkSubmissionHook)
	case boil.BeforeUpsertHook:
		homeworkSubmissionBeforeUpsertHooks = append(homeworkSubmissionBeforeUpsertHooks, homeworkSubmissionHook)
	case boil.AfterInsertHook:
		homeworkSubmissionAfterInsertHooks = append(homeworkSubmissionAfterInsertHooks, homeworkSubmissionHook)
	case boil.AfterSelectHook:
		homeworkSubmissionAfterSelectHooks = append(homeworkSubmissionAfterSelectHooks, homeworkSubmissionHook)
	case boil.AfterUpdateHook:
		homeworkSubmissionAfterUpdateHooks = append(homeworkSubmissionAfterUpdateHooks, homeworkSubmissionHook)
	case boil.AfterDeleteHook:
		homeworkSubmissionAfterDeleteHooks = append(homeworkSubmissionAfterDeleteHooks, homeworkSubmissionHook)
	case boil.AfterUpsertHook:
		homeworkSubmissionAfterUpsertHooks = append(homeworkSubmissionAfterUpsertHooks, homeworkSubmissionHook)
	}
}

// One returns a single homeworkSubmission record from the query.
func (q homeworkSubmissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HomeworkSubmission, error) {
	o := &HomeworkSubmission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for homework_submissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HomeworkSubmission records from the query.
func (q homeworkSubmissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (HomeworkSubmissionSlice, error) {
	var o []*HomeworkSubmission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HomeworkSubmission slice")
	}

	if len(homeworkSubmissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HomeworkSubmission records in the query.
func (q homeworkSubmissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count homework_submissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q homeworkSubmissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if homework_submissions exists")
	}

	return count > 0, nil
}

// Homework pointed to by the foreign key.
func (o *HomeworkSubmission) Homework(mods ...qm.QueryMod) homeworkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HomeworkID),
	}

	queryMods = append(queryMods, mods...)

	query := Homeworks(queryMods...)
	queries.SetFrom(query.Query, "\"homeworks\"")

	return query
}

// User pointed to by the foreign key.
func (o *HomeworkSubmission) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// HomeworkSubmissionComments retrieves all the homework_submission_comment's HomeworkSubmissionComments with an executor.
func (o *HomeworkSubmission) HomeworkSubmissionComments(mods ...qm.QueryMod) homeworkSubmissionCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"homework_submission_comments\".\"homework_submission_id\"=?", o.ID),
	)

	query := HomeworkSubmissionComments(queryMods...)
	queries.SetFrom(query.Query, "\"homework_submission_comments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"homework_submission_comments\".*"})
	}

	return query
}

// LoadHomework allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (homeworkSubmissionL) LoadHomework(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHomeworkSubmission interface{}, mods queries.Applicator) error {
	var slice []*HomeworkSubmission
	var object *HomeworkSubmission

	if singular {
		object = maybeHomeworkSubmission.(*HomeworkSubmission)
	} else {
		slice = *maybeHomeworkSubmission.(*[]*HomeworkSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &homeworkSubmissionR{}
		}
		args = append(args, object.HomeworkID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &homeworkSubmissionR{}
			}

			for _, a := range args {
				if a == obj.HomeworkID {
					continue Outer
				}
			}

			args = append(args, obj.HomeworkID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`homeworks`),
		qm.WhereIn(`homeworks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Homework")
	}

	var resultSlice []*Homework
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Homework")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for homeworks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for homeworks")
	}

	if len(homeworkSubmissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Homework = foreign
		if foreign.R == nil {
			foreign.R = &homeworkR{}
		}
		foreign.R.HomeworkSubmissions = append(foreign.R.HomeworkSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HomeworkID == foreign.ID {
				local.R.Homework = foreign
				if foreign.R == nil {
					foreign.R = &homeworkR{}
				}
				foreign.R.HomeworkSubmissions = append(foreign.R.HomeworkSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (homeworkSubmissionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHomeworkSubmission interface{}, mods queries.Applicator) error {
	var slice []*HomeworkSubmission
	var object *HomeworkSubmission

	if singular {
		object = maybeHomeworkSubmission.(*HomeworkSubmission)
	} else {
		slice = *maybeHomeworkSubmission.(*[]*HomeworkSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &homeworkSubmissionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &homeworkSubmissionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(homeworkSubmissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.HomeworkSubmissions = append(foreign.R.HomeworkSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.HomeworkSubmissions = append(foreign.R.HomeworkSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadHomeworkSubmissionComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (homeworkSubmissionL) LoadHomeworkSubmissionComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHomeworkSubmission interface{}, mods queries.Applicator) error {
	var slice []*HomeworkSubmission
	var object *HomeworkSubmission

	if singular {
		object = maybeHomeworkSubmission.(*HomeworkSubmission)
	} else {
		slice = *maybeHomeworkSubmission.(*[]*HomeworkSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &homeworkSubmissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &homeworkSubmissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`homework_submission_comments`),
		qm.WhereIn(`homework_submission_comments.homework_submission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load homework_submission_comments")
	}

	var resultSlice []*HomeworkSubmissionComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice homework_submission_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on homework_submission_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for homework_submission_comments")
	}

	if len(homeworkSubmissionCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HomeworkSubmissionComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &homeworkSubmissionCommentR{}
			}
			foreign.R.HomeworkSubmission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HomeworkSubmissionID {
				local.R.HomeworkSubmissionComments = append(local.R.HomeworkSubmissionComments, foreign)
				if foreign.R == nil {
					foreign.R = &homeworkSubmissionCommentR{}
				}
				foreign.R.HomeworkSubmission = local
				break
			}
		}
	}

	return nil
}

// SetHomework of the homeworkSubmission to the related item.
// Sets o.R.Homework to related.
// Adds o to related.R.HomeworkSubmissions.
func (o *HomeworkSubmission) SetHomework(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Homework) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"homework_submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"homework_id"}),
		strmangle.WhereClause("\"", "\"", 2, homeworkSubmissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HomeworkID = related.ID
	if o.R == nil {
		o.R = &homeworkSubmissionR{
			Homework: related,
		}
	} else {
		o.R.Homework = related
	}

	if related.R == nil {
		related.R = &homeworkR{
			HomeworkSubmissions: HomeworkSubmissionSlice{o},
		}
	} else {
		related.R.HomeworkSubmissions = append(related.R.HomeworkSubmissions, o)
	}

	return nil
}

// SetUser of the homeworkSubmission to the related item.
// Sets o.R.User to related.
// Adds o to related.R.HomeworkSubmissions.
func (o *HomeworkSubmission) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"homework_submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, homeworkSubmissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &homeworkSubmissionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			HomeworkSubmissions: HomeworkSubmissionSlice{o},
		}
	} else {
		related.R.HomeworkSubmissions = append(related.R.HomeworkSubmissions, o)
	}

	return nil
}

// AddHomeworkSubmissionComments adds the given related objects to the existing relationships
// of the homework_submission, optionally inserting them as new records.
// Appends related to o.R.HomeworkSubmissionComments.
// Sets related.R.HomeworkSubmission appropriately.
func (o *HomeworkSubmission) AddHomeworkSubmissionComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HomeworkSubmissionComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HomeworkSubmissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"homework_submission_comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"homework_submission_id"}),
				strmangle.WhereClause("\"", "\"", 2, homeworkSubmissionCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HomeworkSubmissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &homeworkSubmissionR{
			HomeworkSubmissionComments: related,
		}
	} else {
		o.R.HomeworkSubmissionComments = append(o.R.HomeworkSubmissionComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &homeworkSubmissionCommentR{
				HomeworkSubmission: o,
			}
		} else {
			rel.R.HomeworkSubmission = o
		}
	}
	return nil
}

// HomeworkSubmissions retrieves all the records using an executor.
func HomeworkSubmissions(mods ...qm.QueryMod) homeworkSubmissionQuery {
	mods = append(mods, qm.From("\"homework_submissions\""))
	return homeworkSubmissionQuery{NewQuery(mods...)}
}

// FindHomeworkSubmission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHomeworkSubmission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*HomeworkSubmission, error) {
	homeworkSubmissionObj := &HomeworkSubmission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"homework_submissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, homeworkSubmissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from homework_submissions")
	}

	if err = homeworkSubmissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return homeworkSubmissionObj, err
	}

	return homeworkSubmissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HomeworkSubmission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no homework_submissions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeworkSubmissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	homeworkSubmissionInsertCacheMut.RLock()
	cache, cached := homeworkSubmissionInsertCache[key]
	homeworkSubmissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			homeworkSubmissionAllColumns,
			homeworkSubmissionColumnsWithDefault,
			homeworkSubmissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"homework_submissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"homework_submissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into homework_submissions")
	}

	if !cached {
		homeworkSubmissionInsertCacheMut.Lock()
		homeworkSubmissionInsertCache[key] = cache
		homeworkSubmissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HomeworkSubmission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HomeworkSubmission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	homeworkSubmissionUpdateCacheMut.RLock()
	cache, cached := homeworkSubmissionUpdateCache[key]
	homeworkSubmissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			homeworkSubmissionAllColumns,
			homeworkSubmissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update homework_submissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"homework_submissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, homeworkSubmissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, append(wl, homeworkSubmissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update homework_submissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for homework_submissions")
	}

	if !cached {
		homeworkSubmissionUpdateCacheMut.Lock()
		homeworkSubmissionUpdateCache[key] = cache
		homeworkSubmissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q homeworkSubmissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for homework_submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for homework_submissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HomeworkSubmissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeworkSubmissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"homework_submissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, homeworkSubmissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in homeworkSubmission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all homeworkSubmission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HomeworkSubmission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no homework_submissions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(homeworkSubmissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	homeworkSubmissionUpsertCacheMut.RLock()
	cache, cached := homeworkSubmissionUpsertCache[key]
	homeworkSubmissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			homeworkSubmissionAllColumns,
			homeworkSubmissionColumnsWithDefault,
			homeworkSubmissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			homeworkSubmissionAllColumns,
			homeworkSubmissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert homework_submissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(homeworkSubmissionPrimaryKeyColumns))
			copy(conflict, homeworkSubmissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"homework_submissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(homeworkSubmissionType, homeworkSubmissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert homework_submissions")
	}

	if !cached {
		homeworkSubmissionUpsertCacheMut.Lock()
		homeworkSubmissionUpsertCache[key] = cache
		homeworkSubmissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HomeworkSubmission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HomeworkSubmission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HomeworkSubmission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), homeworkSubmissionPrimaryKeyMapping)
	sql := "DELETE FROM \"homework_submissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from homework_submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for homework_submissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q homeworkSubmissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no homeworkSubmissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from homework_submissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for homework_submissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HomeworkSubmissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(homeworkSubmissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeworkSubmissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"homework_submissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, homeworkSubmissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from homeworkSubmission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for homework_submissions")
	}

	if len(homeworkSubmissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HomeworkSubmission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHomeworkSubmission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HomeworkSubmissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HomeworkSubmissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), homeworkSubmissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"homework_submissions\".* FROM \"homework_submissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, homeworkSubmissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HomeworkSubmissionSlice")
	}

	*o = slice

	return nil
}

// HomeworkSubmissionExists checks if the HomeworkSubmission row exists.
func HomeworkSubmissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"homework_submissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if homework_submissions exists")
	}

	return exists, nil
}
