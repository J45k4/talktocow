// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiaryEntries(t *testing.T) {
	t.Parallel()

	query := DiaryEntries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiaryEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiaryEntries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiaryEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiaryEntryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DiaryEntry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiaryEntryExists to return true, but got false.")
	}
}

func testDiaryEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	diaryEntryFound, err := FindDiaryEntry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if diaryEntryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiaryEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiaryEntries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiaryEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiaryEntries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiaryEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	diaryEntryOne := &DiaryEntry{}
	diaryEntryTwo := &DiaryEntry{}
	if err = randomize.Struct(seed, diaryEntryOne, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryEntryTwo, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiaryEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	diaryEntryOne := &DiaryEntry{}
	diaryEntryTwo := &DiaryEntry{}
	if err = randomize.Struct(seed, diaryEntryOne, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, diaryEntryTwo, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = diaryEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = diaryEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func diaryEntryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func diaryEntryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiaryEntry) error {
	*o = DiaryEntry{}
	return nil
}

func testDiaryEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiaryEntry{}
	o := &DiaryEntry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiaryEntry object: %s", err)
	}

	AddDiaryEntryHook(boil.BeforeInsertHook, diaryEntryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryBeforeInsertHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.AfterInsertHook, diaryEntryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryAfterInsertHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.AfterSelectHook, diaryEntryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	diaryEntryAfterSelectHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.BeforeUpdateHook, diaryEntryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	diaryEntryBeforeUpdateHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.AfterUpdateHook, diaryEntryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	diaryEntryAfterUpdateHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.BeforeDeleteHook, diaryEntryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	diaryEntryBeforeDeleteHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.AfterDeleteHook, diaryEntryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	diaryEntryAfterDeleteHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.BeforeUpsertHook, diaryEntryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryBeforeUpsertHooks = []DiaryEntryHook{}

	AddDiaryEntryHook(boil.AfterUpsertHook, diaryEntryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	diaryEntryAfterUpsertHooks = []DiaryEntryHook{}
}

func testDiaryEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(diaryEntryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiaryEntryToManyDiaryEntryComments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntry
	var b, c DiaryEntryComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, diaryEntryCommentDBTypes, false, diaryEntryCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DiaryEntryID = a.ID
	c.DiaryEntryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DiaryEntryComments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DiaryEntryID == b.DiaryEntryID {
			bFound = true
		}
		if v.DiaryEntryID == c.DiaryEntryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiaryEntrySlice{&a}
	if err = a.L.LoadDiaryEntryComments(ctx, tx, false, (*[]*DiaryEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryEntryComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DiaryEntryComments = nil
	if err = a.L.LoadDiaryEntryComments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiaryEntryComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiaryEntryToManySharedDiaryEntries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntry
	var b, c SharedDiaryEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sharedDiaryEntryDBTypes, false, sharedDiaryEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sharedDiaryEntryDBTypes, false, sharedDiaryEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DiaryEntryID = a.ID
	c.DiaryEntryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SharedDiaryEntries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DiaryEntryID == b.DiaryEntryID {
			bFound = true
		}
		if v.DiaryEntryID == c.DiaryEntryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiaryEntrySlice{&a}
	if err = a.L.LoadSharedDiaryEntries(ctx, tx, false, (*[]*DiaryEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SharedDiaryEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SharedDiaryEntries = nil
	if err = a.L.LoadSharedDiaryEntries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SharedDiaryEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiaryEntryToManyAddOpDiaryEntryComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntry
	var b, c, d, e DiaryEntryComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryDBTypes, false, strmangle.SetComplement(diaryEntryPrimaryKeyColumns, diaryEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiaryEntryComment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, diaryEntryCommentDBTypes, false, strmangle.SetComplement(diaryEntryCommentPrimaryKeyColumns, diaryEntryCommentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DiaryEntryComment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiaryEntryComments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DiaryEntryID {
			t.Error("foreign key was wrong value", a.ID, first.DiaryEntryID)
		}
		if a.ID != second.DiaryEntryID {
			t.Error("foreign key was wrong value", a.ID, second.DiaryEntryID)
		}

		if first.R.DiaryEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DiaryEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DiaryEntryComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DiaryEntryComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DiaryEntryComments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiaryEntryToManyAddOpSharedDiaryEntries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntry
	var b, c, d, e SharedDiaryEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryDBTypes, false, strmangle.SetComplement(diaryEntryPrimaryKeyColumns, diaryEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SharedDiaryEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sharedDiaryEntryDBTypes, false, strmangle.SetComplement(sharedDiaryEntryPrimaryKeyColumns, sharedDiaryEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SharedDiaryEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSharedDiaryEntries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DiaryEntryID {
			t.Error("foreign key was wrong value", a.ID, first.DiaryEntryID)
		}
		if a.ID != second.DiaryEntryID {
			t.Error("foreign key was wrong value", a.ID, second.DiaryEntryID)
		}

		if first.R.DiaryEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DiaryEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SharedDiaryEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SharedDiaryEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SharedDiaryEntries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiaryEntryToOneUserUsingWhoPostedUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiaryEntry
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, diaryEntryDBTypes, false, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WhoPostedUserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WhoPostedUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiaryEntrySlice{&local}
	if err = local.L.LoadWhoPostedUser(ctx, tx, false, (*[]*DiaryEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WhoPostedUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WhoPostedUser = nil
	if err = local.L.LoadWhoPostedUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WhoPostedUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiaryEntryToOneSetOpUserUsingWhoPostedUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiaryEntry
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, diaryEntryDBTypes, false, strmangle.SetComplement(diaryEntryPrimaryKeyColumns, diaryEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetWhoPostedUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WhoPostedUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WhoPostedUserDiaryEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WhoPostedUserID != x.ID {
			t.Error("foreign key was wrong value", a.WhoPostedUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WhoPostedUserID))
		reflect.Indirect(reflect.ValueOf(&a.WhoPostedUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WhoPostedUserID != x.ID {
			t.Error("foreign key was wrong value", a.WhoPostedUserID, x.ID)
		}
	}
}

func testDiaryEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiaryEntrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiaryEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiaryEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	diaryEntryDBTypes = map[string]string{`ID`: `integer`, `Title`: `character varying`, `Body`: `text`, `WhoPostedUserID`: `integer`, `CreatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testDiaryEntriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(diaryEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(diaryEntryAllColumns) == len(diaryEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiaryEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(diaryEntryAllColumns) == len(diaryEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiaryEntry{}
	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, diaryEntryDBTypes, true, diaryEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(diaryEntryAllColumns, diaryEntryPrimaryKeyColumns) {
		fields = diaryEntryAllColumns
	} else {
		fields = strmangle.SetComplement(
			diaryEntryAllColumns,
			diaryEntryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiaryEntrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiaryEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(diaryEntryAllColumns) == len(diaryEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiaryEntry{}
	if err = randomize.Struct(seed, &o, diaryEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryEntry: %s", err)
	}

	count, err := DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, diaryEntryDBTypes, false, diaryEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiaryEntry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiaryEntry: %s", err)
	}

	count, err = DiaryEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
