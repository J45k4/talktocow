// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiaryEntry is an object representing the database table.
type DiaryEntry struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title           null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Body            null.String `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	WhoPostedUserID int         `boil:"who_posted_user_id" json:"who_posted_user_id" toml:"who_posted_user_id" yaml:"who_posted_user_id"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *diaryEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L diaryEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiaryEntryColumns = struct {
	ID              string
	Title           string
	Body            string
	WhoPostedUserID string
	CreatedAt       string
}{
	ID:              "id",
	Title:           "title",
	Body:            "body",
	WhoPostedUserID: "who_posted_user_id",
	CreatedAt:       "created_at",
}

var DiaryEntryTableColumns = struct {
	ID              string
	Title           string
	Body            string
	WhoPostedUserID string
	CreatedAt       string
}{
	ID:              "diary_entries.id",
	Title:           "diary_entries.title",
	Body:            "diary_entries.body",
	WhoPostedUserID: "diary_entries.who_posted_user_id",
	CreatedAt:       "diary_entries.created_at",
}

// Generated where

var DiaryEntryWhere = struct {
	ID              whereHelperint
	Title           whereHelpernull_String
	Body            whereHelpernull_String
	WhoPostedUserID whereHelperint
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint{field: "\"diary_entries\".\"id\""},
	Title:           whereHelpernull_String{field: "\"diary_entries\".\"title\""},
	Body:            whereHelpernull_String{field: "\"diary_entries\".\"body\""},
	WhoPostedUserID: whereHelperint{field: "\"diary_entries\".\"who_posted_user_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"diary_entries\".\"created_at\""},
}

// DiaryEntryRels is where relationship names are stored.
var DiaryEntryRels = struct {
	WhoPostedUser      string
	DiaryEntryComments string
	SharedDiaryEntries string
}{
	WhoPostedUser:      "WhoPostedUser",
	DiaryEntryComments: "DiaryEntryComments",
	SharedDiaryEntries: "SharedDiaryEntries",
}

// diaryEntryR is where relationships are stored.
type diaryEntryR struct {
	WhoPostedUser      *User                  `boil:"WhoPostedUser" json:"WhoPostedUser" toml:"WhoPostedUser" yaml:"WhoPostedUser"`
	DiaryEntryComments DiaryEntryCommentSlice `boil:"DiaryEntryComments" json:"DiaryEntryComments" toml:"DiaryEntryComments" yaml:"DiaryEntryComments"`
	SharedDiaryEntries SharedDiaryEntrySlice  `boil:"SharedDiaryEntries" json:"SharedDiaryEntries" toml:"SharedDiaryEntries" yaml:"SharedDiaryEntries"`
}

// NewStruct creates a new relationship struct
func (*diaryEntryR) NewStruct() *diaryEntryR {
	return &diaryEntryR{}
}

// diaryEntryL is where Load methods for each relationship are stored.
type diaryEntryL struct{}

var (
	diaryEntryAllColumns            = []string{"id", "title", "body", "who_posted_user_id", "created_at"}
	diaryEntryColumnsWithoutDefault = []string{"title", "body", "who_posted_user_id", "created_at"}
	diaryEntryColumnsWithDefault    = []string{"id"}
	diaryEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// DiaryEntrySlice is an alias for a slice of pointers to DiaryEntry.
	// This should almost always be used instead of []DiaryEntry.
	DiaryEntrySlice []*DiaryEntry
	// DiaryEntryHook is the signature for custom DiaryEntry hook methods
	DiaryEntryHook func(context.Context, boil.ContextExecutor, *DiaryEntry) error

	diaryEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	diaryEntryType                 = reflect.TypeOf(&DiaryEntry{})
	diaryEntryMapping              = queries.MakeStructMapping(diaryEntryType)
	diaryEntryPrimaryKeyMapping, _ = queries.BindMapping(diaryEntryType, diaryEntryMapping, diaryEntryPrimaryKeyColumns)
	diaryEntryInsertCacheMut       sync.RWMutex
	diaryEntryInsertCache          = make(map[string]insertCache)
	diaryEntryUpdateCacheMut       sync.RWMutex
	diaryEntryUpdateCache          = make(map[string]updateCache)
	diaryEntryUpsertCacheMut       sync.RWMutex
	diaryEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var diaryEntryBeforeInsertHooks []DiaryEntryHook
var diaryEntryBeforeUpdateHooks []DiaryEntryHook
var diaryEntryBeforeDeleteHooks []DiaryEntryHook
var diaryEntryBeforeUpsertHooks []DiaryEntryHook

var diaryEntryAfterInsertHooks []DiaryEntryHook
var diaryEntryAfterSelectHooks []DiaryEntryHook
var diaryEntryAfterUpdateHooks []DiaryEntryHook
var diaryEntryAfterDeleteHooks []DiaryEntryHook
var diaryEntryAfterUpsertHooks []DiaryEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiaryEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiaryEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiaryEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiaryEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiaryEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiaryEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiaryEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiaryEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiaryEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range diaryEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiaryEntryHook registers your hook function for all future operations.
func AddDiaryEntryHook(hookPoint boil.HookPoint, diaryEntryHook DiaryEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		diaryEntryBeforeInsertHooks = append(diaryEntryBeforeInsertHooks, diaryEntryHook)
	case boil.BeforeUpdateHook:
		diaryEntryBeforeUpdateHooks = append(diaryEntryBeforeUpdateHooks, diaryEntryHook)
	case boil.BeforeDeleteHook:
		diaryEntryBeforeDeleteHooks = append(diaryEntryBeforeDeleteHooks, diaryEntryHook)
	case boil.BeforeUpsertHook:
		diaryEntryBeforeUpsertHooks = append(diaryEntryBeforeUpsertHooks, diaryEntryHook)
	case boil.AfterInsertHook:
		diaryEntryAfterInsertHooks = append(diaryEntryAfterInsertHooks, diaryEntryHook)
	case boil.AfterSelectHook:
		diaryEntryAfterSelectHooks = append(diaryEntryAfterSelectHooks, diaryEntryHook)
	case boil.AfterUpdateHook:
		diaryEntryAfterUpdateHooks = append(diaryEntryAfterUpdateHooks, diaryEntryHook)
	case boil.AfterDeleteHook:
		diaryEntryAfterDeleteHooks = append(diaryEntryAfterDeleteHooks, diaryEntryHook)
	case boil.AfterUpsertHook:
		diaryEntryAfterUpsertHooks = append(diaryEntryAfterUpsertHooks, diaryEntryHook)
	}
}

// One returns a single diaryEntry record from the query.
func (q diaryEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiaryEntry, error) {
	o := &DiaryEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for diary_entries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiaryEntry records from the query.
func (q diaryEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiaryEntrySlice, error) {
	var o []*DiaryEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiaryEntry slice")
	}

	if len(diaryEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiaryEntry records in the query.
func (q diaryEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count diary_entries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q diaryEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if diary_entries exists")
	}

	return count > 0, nil
}

// WhoPostedUser pointed to by the foreign key.
func (o *DiaryEntry) WhoPostedUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WhoPostedUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DiaryEntryComments retrieves all the diary_entry_comment's DiaryEntryComments with an executor.
func (o *DiaryEntry) DiaryEntryComments(mods ...qm.QueryMod) diaryEntryCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"diary_entry_comments\".\"diary_entry_id\"=?", o.ID),
	)

	query := DiaryEntryComments(queryMods...)
	queries.SetFrom(query.Query, "\"diary_entry_comments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"diary_entry_comments\".*"})
	}

	return query
}

// SharedDiaryEntries retrieves all the shared_diary_entry's SharedDiaryEntries with an executor.
func (o *DiaryEntry) SharedDiaryEntries(mods ...qm.QueryMod) sharedDiaryEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shared_diary_entries\".\"diary_entry_id\"=?", o.ID),
	)

	query := SharedDiaryEntries(queryMods...)
	queries.SetFrom(query.Query, "\"shared_diary_entries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"shared_diary_entries\".*"})
	}

	return query
}

// LoadWhoPostedUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (diaryEntryL) LoadWhoPostedUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiaryEntry interface{}, mods queries.Applicator) error {
	var slice []*DiaryEntry
	var object *DiaryEntry

	if singular {
		object = maybeDiaryEntry.(*DiaryEntry)
	} else {
		slice = *maybeDiaryEntry.(*[]*DiaryEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &diaryEntryR{}
		}
		args = append(args, object.WhoPostedUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryEntryR{}
			}

			for _, a := range args {
				if a == obj.WhoPostedUserID {
					continue Outer
				}
			}

			args = append(args, obj.WhoPostedUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(diaryEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WhoPostedUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WhoPostedUserDiaryEntries = append(foreign.R.WhoPostedUserDiaryEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WhoPostedUserID == foreign.ID {
				local.R.WhoPostedUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WhoPostedUserDiaryEntries = append(foreign.R.WhoPostedUserDiaryEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadDiaryEntryComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (diaryEntryL) LoadDiaryEntryComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiaryEntry interface{}, mods queries.Applicator) error {
	var slice []*DiaryEntry
	var object *DiaryEntry

	if singular {
		object = maybeDiaryEntry.(*DiaryEntry)
	} else {
		slice = *maybeDiaryEntry.(*[]*DiaryEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &diaryEntryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryEntryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`diary_entry_comments`),
		qm.WhereIn(`diary_entry_comments.diary_entry_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load diary_entry_comments")
	}

	var resultSlice []*DiaryEntryComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice diary_entry_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on diary_entry_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary_entry_comments")
	}

	if len(diaryEntryCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiaryEntryComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &diaryEntryCommentR{}
			}
			foreign.R.DiaryEntry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DiaryEntryID {
				local.R.DiaryEntryComments = append(local.R.DiaryEntryComments, foreign)
				if foreign.R == nil {
					foreign.R = &diaryEntryCommentR{}
				}
				foreign.R.DiaryEntry = local
				break
			}
		}
	}

	return nil
}

// LoadSharedDiaryEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (diaryEntryL) LoadSharedDiaryEntries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiaryEntry interface{}, mods queries.Applicator) error {
	var slice []*DiaryEntry
	var object *DiaryEntry

	if singular {
		object = maybeDiaryEntry.(*DiaryEntry)
	} else {
		slice = *maybeDiaryEntry.(*[]*DiaryEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &diaryEntryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &diaryEntryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shared_diary_entries`),
		qm.WhereIn(`shared_diary_entries.diary_entry_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shared_diary_entries")
	}

	var resultSlice []*SharedDiaryEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shared_diary_entries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shared_diary_entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shared_diary_entries")
	}

	if len(sharedDiaryEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SharedDiaryEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sharedDiaryEntryR{}
			}
			foreign.R.DiaryEntry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DiaryEntryID {
				local.R.SharedDiaryEntries = append(local.R.SharedDiaryEntries, foreign)
				if foreign.R == nil {
					foreign.R = &sharedDiaryEntryR{}
				}
				foreign.R.DiaryEntry = local
				break
			}
		}
	}

	return nil
}

// SetWhoPostedUser of the diaryEntry to the related item.
// Sets o.R.WhoPostedUser to related.
// Adds o to related.R.WhoPostedUserDiaryEntries.
func (o *DiaryEntry) SetWhoPostedUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"diary_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"who_posted_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, diaryEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WhoPostedUserID = related.ID
	if o.R == nil {
		o.R = &diaryEntryR{
			WhoPostedUser: related,
		}
	} else {
		o.R.WhoPostedUser = related
	}

	if related.R == nil {
		related.R = &userR{
			WhoPostedUserDiaryEntries: DiaryEntrySlice{o},
		}
	} else {
		related.R.WhoPostedUserDiaryEntries = append(related.R.WhoPostedUserDiaryEntries, o)
	}

	return nil
}

// AddDiaryEntryComments adds the given related objects to the existing relationships
// of the diary_entry, optionally inserting them as new records.
// Appends related to o.R.DiaryEntryComments.
// Sets related.R.DiaryEntry appropriately.
func (o *DiaryEntry) AddDiaryEntryComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiaryEntryComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiaryEntryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"diary_entry_comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"diary_entry_id"}),
				strmangle.WhereClause("\"", "\"", 2, diaryEntryCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiaryEntryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &diaryEntryR{
			DiaryEntryComments: related,
		}
	} else {
		o.R.DiaryEntryComments = append(o.R.DiaryEntryComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &diaryEntryCommentR{
				DiaryEntry: o,
			}
		} else {
			rel.R.DiaryEntry = o
		}
	}
	return nil
}

// AddSharedDiaryEntries adds the given related objects to the existing relationships
// of the diary_entry, optionally inserting them as new records.
// Appends related to o.R.SharedDiaryEntries.
// Sets related.R.DiaryEntry appropriately.
func (o *DiaryEntry) AddSharedDiaryEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SharedDiaryEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiaryEntryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shared_diary_entries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"diary_entry_id"}),
				strmangle.WhereClause("\"", "\"", 2, sharedDiaryEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiaryEntryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &diaryEntryR{
			SharedDiaryEntries: related,
		}
	} else {
		o.R.SharedDiaryEntries = append(o.R.SharedDiaryEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sharedDiaryEntryR{
				DiaryEntry: o,
			}
		} else {
			rel.R.DiaryEntry = o
		}
	}
	return nil
}

// DiaryEntries retrieves all the records using an executor.
func DiaryEntries(mods ...qm.QueryMod) diaryEntryQuery {
	mods = append(mods, qm.From("\"diary_entries\""))
	return diaryEntryQuery{NewQuery(mods...)}
}

// FindDiaryEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiaryEntry(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DiaryEntry, error) {
	diaryEntryObj := &DiaryEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"diary_entries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, diaryEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from diary_entries")
	}

	if err = diaryEntryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return diaryEntryObj, err
	}

	return diaryEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiaryEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_entries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	diaryEntryInsertCacheMut.RLock()
	cache, cached := diaryEntryInsertCache[key]
	diaryEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			diaryEntryAllColumns,
			diaryEntryColumnsWithDefault,
			diaryEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(diaryEntryType, diaryEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(diaryEntryType, diaryEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"diary_entries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"diary_entries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into diary_entries")
	}

	if !cached {
		diaryEntryInsertCacheMut.Lock()
		diaryEntryInsertCache[key] = cache
		diaryEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiaryEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiaryEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	diaryEntryUpdateCacheMut.RLock()
	cache, cached := diaryEntryUpdateCache[key]
	diaryEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			diaryEntryAllColumns,
			diaryEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update diary_entries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"diary_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, diaryEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(diaryEntryType, diaryEntryMapping, append(wl, diaryEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update diary_entries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for diary_entries")
	}

	if !cached {
		diaryEntryUpdateCacheMut.Lock()
		diaryEntryUpdateCache[key] = cache
		diaryEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q diaryEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for diary_entries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiaryEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"diary_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, diaryEntryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in diaryEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all diaryEntry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiaryEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no diary_entries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(diaryEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	diaryEntryUpsertCacheMut.RLock()
	cache, cached := diaryEntryUpsertCache[key]
	diaryEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			diaryEntryAllColumns,
			diaryEntryColumnsWithDefault,
			diaryEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			diaryEntryAllColumns,
			diaryEntryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert diary_entries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(diaryEntryPrimaryKeyColumns))
			copy(conflict, diaryEntryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"diary_entries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(diaryEntryType, diaryEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(diaryEntryType, diaryEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert diary_entries")
	}

	if !cached {
		diaryEntryUpsertCacheMut.Lock()
		diaryEntryUpsertCache[key] = cache
		diaryEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiaryEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiaryEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiaryEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), diaryEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"diary_entries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for diary_entries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q diaryEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no diaryEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_entries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiaryEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(diaryEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"diary_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, diaryEntryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from diaryEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for diary_entries")
	}

	if len(diaryEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiaryEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiaryEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiaryEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiaryEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), diaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"diary_entries\".* FROM \"diary_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, diaryEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiaryEntrySlice")
	}

	*o = slice

	return nil
}

// DiaryEntryExists checks if the DiaryEntry row exists.
func DiaryEntryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"diary_entries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if diary_entries exists")
	}

	return exists, nil
}
