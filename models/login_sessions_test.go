// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLoginSessions(t *testing.T) {
	t.Parallel()

	query := LoginSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLoginSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LoginSessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLoginSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LoginSessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LoginSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LoginSessionExists to return true, but got false.")
	}
}

func testLoginSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	loginSessionFound, err := FindLoginSession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if loginSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLoginSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LoginSessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLoginSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LoginSessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLoginSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	loginSessionOne := &LoginSession{}
	loginSessionTwo := &LoginSession{}
	if err = randomize.Struct(seed, loginSessionOne, loginSessionDBTypes, false, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}
	if err = randomize.Struct(seed, loginSessionTwo, loginSessionDBTypes, false, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = loginSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LoginSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLoginSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	loginSessionOne := &LoginSession{}
	loginSessionTwo := &LoginSession{}
	if err = randomize.Struct(seed, loginSessionOne, loginSessionDBTypes, false, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}
	if err = randomize.Struct(seed, loginSessionTwo, loginSessionDBTypes, false, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = loginSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = loginSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func loginSessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func loginSessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LoginSession) error {
	*o = LoginSession{}
	return nil
}

func testLoginSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LoginSession{}
	o := &LoginSession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, loginSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LoginSession object: %s", err)
	}

	AddLoginSessionHook(boil.BeforeInsertHook, loginSessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	loginSessionBeforeInsertHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.AfterInsertHook, loginSessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	loginSessionAfterInsertHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.AfterSelectHook, loginSessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	loginSessionAfterSelectHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.BeforeUpdateHook, loginSessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	loginSessionBeforeUpdateHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.AfterUpdateHook, loginSessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	loginSessionAfterUpdateHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.BeforeDeleteHook, loginSessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	loginSessionBeforeDeleteHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.AfterDeleteHook, loginSessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	loginSessionAfterDeleteHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.BeforeUpsertHook, loginSessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	loginSessionBeforeUpsertHooks = []LoginSessionHook{}

	AddLoginSessionHook(boil.AfterUpsertHook, loginSessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	loginSessionAfterUpsertHooks = []LoginSessionHook{}
}

func testLoginSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(loginSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLoginSessionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LoginSession
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, loginSessionDBTypes, false, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LoginSessionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*LoginSession)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLoginSessionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LoginSession
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, loginSessionDBTypes, false, strmangle.SetComplement(loginSessionPrimaryKeyColumns, loginSessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LoginSessions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testLoginSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLoginSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LoginSessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLoginSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LoginSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	loginSessionDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `Agent`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testLoginSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(loginSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(loginSessionAllColumns) == len(loginSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLoginSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(loginSessionAllColumns) == len(loginSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LoginSession{}
	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, loginSessionDBTypes, true, loginSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(loginSessionAllColumns, loginSessionPrimaryKeyColumns) {
		fields = loginSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			loginSessionAllColumns,
			loginSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LoginSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLoginSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(loginSessionAllColumns) == len(loginSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LoginSession{}
	if err = randomize.Struct(seed, &o, loginSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LoginSession: %s", err)
	}

	count, err := LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, loginSessionDBTypes, false, loginSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LoginSession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LoginSession: %s", err)
	}

	count, err = LoginSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
