// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SharedDiaryEntry is an object representing the database table.
type SharedDiaryEntry struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title        null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	DiaryEntryID int         `boil:"diary_entry_id" json:"diary_entry_id" toml:"diary_entry_id" yaml:"diary_entry_id"`
	UserID       int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *sharedDiaryEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sharedDiaryEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SharedDiaryEntryColumns = struct {
	ID           string
	Title        string
	DiaryEntryID string
	UserID       string
	CreatedAt    string
}{
	ID:           "id",
	Title:        "title",
	DiaryEntryID: "diary_entry_id",
	UserID:       "user_id",
	CreatedAt:    "created_at",
}

var SharedDiaryEntryTableColumns = struct {
	ID           string
	Title        string
	DiaryEntryID string
	UserID       string
	CreatedAt    string
}{
	ID:           "shared_diary_entries.id",
	Title:        "shared_diary_entries.title",
	DiaryEntryID: "shared_diary_entries.diary_entry_id",
	UserID:       "shared_diary_entries.user_id",
	CreatedAt:    "shared_diary_entries.created_at",
}

// Generated where

var SharedDiaryEntryWhere = struct {
	ID           whereHelperint
	Title        whereHelpernull_String
	DiaryEntryID whereHelperint
	UserID       whereHelperint
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"shared_diary_entries\".\"id\""},
	Title:        whereHelpernull_String{field: "\"shared_diary_entries\".\"title\""},
	DiaryEntryID: whereHelperint{field: "\"shared_diary_entries\".\"diary_entry_id\""},
	UserID:       whereHelperint{field: "\"shared_diary_entries\".\"user_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"shared_diary_entries\".\"created_at\""},
}

// SharedDiaryEntryRels is where relationship names are stored.
var SharedDiaryEntryRels = struct {
	DiaryEntry string
	User       string
}{
	DiaryEntry: "DiaryEntry",
	User:       "User",
}

// sharedDiaryEntryR is where relationships are stored.
type sharedDiaryEntryR struct {
	DiaryEntry *DiaryEntry `boil:"DiaryEntry" json:"DiaryEntry" toml:"DiaryEntry" yaml:"DiaryEntry"`
	User       *User       `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*sharedDiaryEntryR) NewStruct() *sharedDiaryEntryR {
	return &sharedDiaryEntryR{}
}

// sharedDiaryEntryL is where Load methods for each relationship are stored.
type sharedDiaryEntryL struct{}

var (
	sharedDiaryEntryAllColumns            = []string{"id", "title", "diary_entry_id", "user_id", "created_at"}
	sharedDiaryEntryColumnsWithoutDefault = []string{"title", "diary_entry_id", "user_id", "created_at"}
	sharedDiaryEntryColumnsWithDefault    = []string{"id"}
	sharedDiaryEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// SharedDiaryEntrySlice is an alias for a slice of pointers to SharedDiaryEntry.
	// This should almost always be used instead of []SharedDiaryEntry.
	SharedDiaryEntrySlice []*SharedDiaryEntry
	// SharedDiaryEntryHook is the signature for custom SharedDiaryEntry hook methods
	SharedDiaryEntryHook func(context.Context, boil.ContextExecutor, *SharedDiaryEntry) error

	sharedDiaryEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sharedDiaryEntryType                 = reflect.TypeOf(&SharedDiaryEntry{})
	sharedDiaryEntryMapping              = queries.MakeStructMapping(sharedDiaryEntryType)
	sharedDiaryEntryPrimaryKeyMapping, _ = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, sharedDiaryEntryPrimaryKeyColumns)
	sharedDiaryEntryInsertCacheMut       sync.RWMutex
	sharedDiaryEntryInsertCache          = make(map[string]insertCache)
	sharedDiaryEntryUpdateCacheMut       sync.RWMutex
	sharedDiaryEntryUpdateCache          = make(map[string]updateCache)
	sharedDiaryEntryUpsertCacheMut       sync.RWMutex
	sharedDiaryEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sharedDiaryEntryBeforeInsertHooks []SharedDiaryEntryHook
var sharedDiaryEntryBeforeUpdateHooks []SharedDiaryEntryHook
var sharedDiaryEntryBeforeDeleteHooks []SharedDiaryEntryHook
var sharedDiaryEntryBeforeUpsertHooks []SharedDiaryEntryHook

var sharedDiaryEntryAfterInsertHooks []SharedDiaryEntryHook
var sharedDiaryEntryAfterSelectHooks []SharedDiaryEntryHook
var sharedDiaryEntryAfterUpdateHooks []SharedDiaryEntryHook
var sharedDiaryEntryAfterDeleteHooks []SharedDiaryEntryHook
var sharedDiaryEntryAfterUpsertHooks []SharedDiaryEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SharedDiaryEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SharedDiaryEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SharedDiaryEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SharedDiaryEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SharedDiaryEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SharedDiaryEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SharedDiaryEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SharedDiaryEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SharedDiaryEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sharedDiaryEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSharedDiaryEntryHook registers your hook function for all future operations.
func AddSharedDiaryEntryHook(hookPoint boil.HookPoint, sharedDiaryEntryHook SharedDiaryEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sharedDiaryEntryBeforeInsertHooks = append(sharedDiaryEntryBeforeInsertHooks, sharedDiaryEntryHook)
	case boil.BeforeUpdateHook:
		sharedDiaryEntryBeforeUpdateHooks = append(sharedDiaryEntryBeforeUpdateHooks, sharedDiaryEntryHook)
	case boil.BeforeDeleteHook:
		sharedDiaryEntryBeforeDeleteHooks = append(sharedDiaryEntryBeforeDeleteHooks, sharedDiaryEntryHook)
	case boil.BeforeUpsertHook:
		sharedDiaryEntryBeforeUpsertHooks = append(sharedDiaryEntryBeforeUpsertHooks, sharedDiaryEntryHook)
	case boil.AfterInsertHook:
		sharedDiaryEntryAfterInsertHooks = append(sharedDiaryEntryAfterInsertHooks, sharedDiaryEntryHook)
	case boil.AfterSelectHook:
		sharedDiaryEntryAfterSelectHooks = append(sharedDiaryEntryAfterSelectHooks, sharedDiaryEntryHook)
	case boil.AfterUpdateHook:
		sharedDiaryEntryAfterUpdateHooks = append(sharedDiaryEntryAfterUpdateHooks, sharedDiaryEntryHook)
	case boil.AfterDeleteHook:
		sharedDiaryEntryAfterDeleteHooks = append(sharedDiaryEntryAfterDeleteHooks, sharedDiaryEntryHook)
	case boil.AfterUpsertHook:
		sharedDiaryEntryAfterUpsertHooks = append(sharedDiaryEntryAfterUpsertHooks, sharedDiaryEntryHook)
	}
}

// One returns a single sharedDiaryEntry record from the query.
func (q sharedDiaryEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SharedDiaryEntry, error) {
	o := &SharedDiaryEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shared_diary_entries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SharedDiaryEntry records from the query.
func (q sharedDiaryEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SharedDiaryEntrySlice, error) {
	var o []*SharedDiaryEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SharedDiaryEntry slice")
	}

	if len(sharedDiaryEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SharedDiaryEntry records in the query.
func (q sharedDiaryEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shared_diary_entries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sharedDiaryEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shared_diary_entries exists")
	}

	return count > 0, nil
}

// DiaryEntry pointed to by the foreign key.
func (o *SharedDiaryEntry) DiaryEntry(mods ...qm.QueryMod) diaryEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DiaryEntryID),
	}

	queryMods = append(queryMods, mods...)

	query := DiaryEntries(queryMods...)
	queries.SetFrom(query.Query, "\"diary_entries\"")

	return query
}

// User pointed to by the foreign key.
func (o *SharedDiaryEntry) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadDiaryEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sharedDiaryEntryL) LoadDiaryEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSharedDiaryEntry interface{}, mods queries.Applicator) error {
	var slice []*SharedDiaryEntry
	var object *SharedDiaryEntry

	if singular {
		object = maybeSharedDiaryEntry.(*SharedDiaryEntry)
	} else {
		slice = *maybeSharedDiaryEntry.(*[]*SharedDiaryEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sharedDiaryEntryR{}
		}
		args = append(args, object.DiaryEntryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sharedDiaryEntryR{}
			}

			for _, a := range args {
				if a == obj.DiaryEntryID {
					continue Outer
				}
			}

			args = append(args, obj.DiaryEntryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`diary_entries`),
		qm.WhereIn(`diary_entries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DiaryEntry")
	}

	var resultSlice []*DiaryEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DiaryEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for diary_entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for diary_entries")
	}

	if len(sharedDiaryEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DiaryEntry = foreign
		if foreign.R == nil {
			foreign.R = &diaryEntryR{}
		}
		foreign.R.SharedDiaryEntries = append(foreign.R.SharedDiaryEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DiaryEntryID == foreign.ID {
				local.R.DiaryEntry = foreign
				if foreign.R == nil {
					foreign.R = &diaryEntryR{}
				}
				foreign.R.SharedDiaryEntries = append(foreign.R.SharedDiaryEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sharedDiaryEntryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSharedDiaryEntry interface{}, mods queries.Applicator) error {
	var slice []*SharedDiaryEntry
	var object *SharedDiaryEntry

	if singular {
		object = maybeSharedDiaryEntry.(*SharedDiaryEntry)
	} else {
		slice = *maybeSharedDiaryEntry.(*[]*SharedDiaryEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sharedDiaryEntryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sharedDiaryEntryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sharedDiaryEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SharedDiaryEntries = append(foreign.R.SharedDiaryEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SharedDiaryEntries = append(foreign.R.SharedDiaryEntries, local)
				break
			}
		}
	}

	return nil
}

// SetDiaryEntry of the sharedDiaryEntry to the related item.
// Sets o.R.DiaryEntry to related.
// Adds o to related.R.SharedDiaryEntries.
func (o *SharedDiaryEntry) SetDiaryEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DiaryEntry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shared_diary_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"diary_entry_id"}),
		strmangle.WhereClause("\"", "\"", 2, sharedDiaryEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DiaryEntryID = related.ID
	if o.R == nil {
		o.R = &sharedDiaryEntryR{
			DiaryEntry: related,
		}
	} else {
		o.R.DiaryEntry = related
	}

	if related.R == nil {
		related.R = &diaryEntryR{
			SharedDiaryEntries: SharedDiaryEntrySlice{o},
		}
	} else {
		related.R.SharedDiaryEntries = append(related.R.SharedDiaryEntries, o)
	}

	return nil
}

// SetUser of the sharedDiaryEntry to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SharedDiaryEntries.
func (o *SharedDiaryEntry) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shared_diary_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, sharedDiaryEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &sharedDiaryEntryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SharedDiaryEntries: SharedDiaryEntrySlice{o},
		}
	} else {
		related.R.SharedDiaryEntries = append(related.R.SharedDiaryEntries, o)
	}

	return nil
}

// SharedDiaryEntries retrieves all the records using an executor.
func SharedDiaryEntries(mods ...qm.QueryMod) sharedDiaryEntryQuery {
	mods = append(mods, qm.From("\"shared_diary_entries\""))
	return sharedDiaryEntryQuery{NewQuery(mods...)}
}

// FindSharedDiaryEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSharedDiaryEntry(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SharedDiaryEntry, error) {
	sharedDiaryEntryObj := &SharedDiaryEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shared_diary_entries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sharedDiaryEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shared_diary_entries")
	}

	if err = sharedDiaryEntryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sharedDiaryEntryObj, err
	}

	return sharedDiaryEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SharedDiaryEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shared_diary_entries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sharedDiaryEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sharedDiaryEntryInsertCacheMut.RLock()
	cache, cached := sharedDiaryEntryInsertCache[key]
	sharedDiaryEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sharedDiaryEntryAllColumns,
			sharedDiaryEntryColumnsWithDefault,
			sharedDiaryEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shared_diary_entries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shared_diary_entries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shared_diary_entries")
	}

	if !cached {
		sharedDiaryEntryInsertCacheMut.Lock()
		sharedDiaryEntryInsertCache[key] = cache
		sharedDiaryEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SharedDiaryEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SharedDiaryEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sharedDiaryEntryUpdateCacheMut.RLock()
	cache, cached := sharedDiaryEntryUpdateCache[key]
	sharedDiaryEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sharedDiaryEntryAllColumns,
			sharedDiaryEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shared_diary_entries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shared_diary_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sharedDiaryEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, append(wl, sharedDiaryEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shared_diary_entries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shared_diary_entries")
	}

	if !cached {
		sharedDiaryEntryUpdateCacheMut.Lock()
		sharedDiaryEntryUpdateCache[key] = cache
		sharedDiaryEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sharedDiaryEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shared_diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shared_diary_entries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SharedDiaryEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharedDiaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shared_diary_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sharedDiaryEntryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sharedDiaryEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sharedDiaryEntry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SharedDiaryEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shared_diary_entries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sharedDiaryEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sharedDiaryEntryUpsertCacheMut.RLock()
	cache, cached := sharedDiaryEntryUpsertCache[key]
	sharedDiaryEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sharedDiaryEntryAllColumns,
			sharedDiaryEntryColumnsWithDefault,
			sharedDiaryEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sharedDiaryEntryAllColumns,
			sharedDiaryEntryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shared_diary_entries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sharedDiaryEntryPrimaryKeyColumns))
			copy(conflict, sharedDiaryEntryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shared_diary_entries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sharedDiaryEntryType, sharedDiaryEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shared_diary_entries")
	}

	if !cached {
		sharedDiaryEntryUpsertCacheMut.Lock()
		sharedDiaryEntryUpsertCache[key] = cache
		sharedDiaryEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SharedDiaryEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SharedDiaryEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SharedDiaryEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sharedDiaryEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"shared_diary_entries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shared_diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shared_diary_entries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sharedDiaryEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sharedDiaryEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shared_diary_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shared_diary_entries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SharedDiaryEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sharedDiaryEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharedDiaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shared_diary_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sharedDiaryEntryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sharedDiaryEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shared_diary_entries")
	}

	if len(sharedDiaryEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SharedDiaryEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSharedDiaryEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SharedDiaryEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SharedDiaryEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharedDiaryEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shared_diary_entries\".* FROM \"shared_diary_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sharedDiaryEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SharedDiaryEntrySlice")
	}

	*o = slice

	return nil
}

// SharedDiaryEntryExists checks if the SharedDiaryEntry row exists.
func SharedDiaryEntryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shared_diary_entries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shared_diary_entries exists")
	}

	return exists, nil
}
