// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHomeworkSubmissions(t *testing.T) {
	t.Parallel()

	query := HomeworkSubmissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHomeworkSubmissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHomeworkSubmissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := HomeworkSubmissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHomeworkSubmissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HomeworkSubmissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHomeworkSubmissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HomeworkSubmissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if HomeworkSubmission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HomeworkSubmissionExists to return true, but got false.")
	}
}

func testHomeworkSubmissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	homeworkSubmissionFound, err := FindHomeworkSubmission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if homeworkSubmissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHomeworkSubmissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = HomeworkSubmissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHomeworkSubmissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := HomeworkSubmissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHomeworkSubmissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	homeworkSubmissionOne := &HomeworkSubmission{}
	homeworkSubmissionTwo := &HomeworkSubmission{}
	if err = randomize.Struct(seed, homeworkSubmissionOne, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}
	if err = randomize.Struct(seed, homeworkSubmissionTwo, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = homeworkSubmissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = homeworkSubmissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HomeworkSubmissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHomeworkSubmissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	homeworkSubmissionOne := &HomeworkSubmission{}
	homeworkSubmissionTwo := &HomeworkSubmission{}
	if err = randomize.Struct(seed, homeworkSubmissionOne, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}
	if err = randomize.Struct(seed, homeworkSubmissionTwo, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = homeworkSubmissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = homeworkSubmissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func homeworkSubmissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func homeworkSubmissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HomeworkSubmission) error {
	*o = HomeworkSubmission{}
	return nil
}

func testHomeworkSubmissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &HomeworkSubmission{}
	o := &HomeworkSubmission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission object: %s", err)
	}

	AddHomeworkSubmissionHook(boil.BeforeInsertHook, homeworkSubmissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionBeforeInsertHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.AfterInsertHook, homeworkSubmissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionAfterInsertHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.AfterSelectHook, homeworkSubmissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionAfterSelectHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.BeforeUpdateHook, homeworkSubmissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionBeforeUpdateHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.AfterUpdateHook, homeworkSubmissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionAfterUpdateHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.BeforeDeleteHook, homeworkSubmissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionBeforeDeleteHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.AfterDeleteHook, homeworkSubmissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionAfterDeleteHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.BeforeUpsertHook, homeworkSubmissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionBeforeUpsertHooks = []HomeworkSubmissionHook{}

	AddHomeworkSubmissionHook(boil.AfterUpsertHook, homeworkSubmissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	homeworkSubmissionAfterUpsertHooks = []HomeworkSubmissionHook{}
}

func testHomeworkSubmissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHomeworkSubmissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(homeworkSubmissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHomeworkSubmissionToManyHomeworkSubmissionComments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HomeworkSubmission
	var b, c HomeworkSubmissionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, homeworkSubmissionCommentDBTypes, false, homeworkSubmissionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, homeworkSubmissionCommentDBTypes, false, homeworkSubmissionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.HomeworkSubmissionID = a.ID
	c.HomeworkSubmissionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HomeworkSubmissionComments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.HomeworkSubmissionID == b.HomeworkSubmissionID {
			bFound = true
		}
		if v.HomeworkSubmissionID == c.HomeworkSubmissionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HomeworkSubmissionSlice{&a}
	if err = a.L.LoadHomeworkSubmissionComments(ctx, tx, false, (*[]*HomeworkSubmission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeworkSubmissionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HomeworkSubmissionComments = nil
	if err = a.L.LoadHomeworkSubmissionComments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeworkSubmissionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHomeworkSubmissionToManyAddOpHomeworkSubmissionComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HomeworkSubmission
	var b, c, d, e HomeworkSubmissionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, homeworkSubmissionDBTypes, false, strmangle.SetComplement(homeworkSubmissionPrimaryKeyColumns, homeworkSubmissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*HomeworkSubmissionComment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, homeworkSubmissionCommentDBTypes, false, strmangle.SetComplement(homeworkSubmissionCommentPrimaryKeyColumns, homeworkSubmissionCommentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*HomeworkSubmissionComment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHomeworkSubmissionComments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.HomeworkSubmissionID {
			t.Error("foreign key was wrong value", a.ID, first.HomeworkSubmissionID)
		}
		if a.ID != second.HomeworkSubmissionID {
			t.Error("foreign key was wrong value", a.ID, second.HomeworkSubmissionID)
		}

		if first.R.HomeworkSubmission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HomeworkSubmission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HomeworkSubmissionComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HomeworkSubmissionComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HomeworkSubmissionComments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testHomeworkSubmissionToOneHomeworkUsingHomework(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local HomeworkSubmission
	var foreign Homework

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, homeworkDBTypes, false, homeworkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Homework struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HomeworkID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Homework().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := HomeworkSubmissionSlice{&local}
	if err = local.L.LoadHomework(ctx, tx, false, (*[]*HomeworkSubmission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Homework == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Homework = nil
	if err = local.L.LoadHomework(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Homework == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testHomeworkSubmissionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local HomeworkSubmission
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, homeworkSubmissionDBTypes, false, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := HomeworkSubmissionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*HomeworkSubmission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testHomeworkSubmissionToOneSetOpHomeworkUsingHomework(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HomeworkSubmission
	var b, c Homework

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, homeworkSubmissionDBTypes, false, strmangle.SetComplement(homeworkSubmissionPrimaryKeyColumns, homeworkSubmissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, homeworkDBTypes, false, strmangle.SetComplement(homeworkPrimaryKeyColumns, homeworkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, homeworkDBTypes, false, strmangle.SetComplement(homeworkPrimaryKeyColumns, homeworkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Homework{&b, &c} {
		err = a.SetHomework(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Homework != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HomeworkSubmissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HomeworkID != x.ID {
			t.Error("foreign key was wrong value", a.HomeworkID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HomeworkID))
		reflect.Indirect(reflect.ValueOf(&a.HomeworkID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HomeworkID != x.ID {
			t.Error("foreign key was wrong value", a.HomeworkID, x.ID)
		}
	}
}
func testHomeworkSubmissionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HomeworkSubmission
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, homeworkSubmissionDBTypes, false, strmangle.SetComplement(homeworkSubmissionPrimaryKeyColumns, homeworkSubmissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HomeworkSubmissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testHomeworkSubmissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHomeworkSubmissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HomeworkSubmissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHomeworkSubmissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HomeworkSubmissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	homeworkSubmissionDBTypes = map[string]string{`ID`: `integer`, `HomeworkID`: `integer`, `UserID`: `integer`, `Submission`: `text`, `Status`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                         = bytes.MinRead
)

func testHomeworkSubmissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(homeworkSubmissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(homeworkSubmissionAllColumns) == len(homeworkSubmissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHomeworkSubmissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(homeworkSubmissionAllColumns) == len(homeworkSubmissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HomeworkSubmission{}
	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, homeworkSubmissionDBTypes, true, homeworkSubmissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(homeworkSubmissionAllColumns, homeworkSubmissionPrimaryKeyColumns) {
		fields = homeworkSubmissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			homeworkSubmissionAllColumns,
			homeworkSubmissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HomeworkSubmissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHomeworkSubmissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(homeworkSubmissionAllColumns) == len(homeworkSubmissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := HomeworkSubmission{}
	if err = randomize.Struct(seed, &o, homeworkSubmissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HomeworkSubmission: %s", err)
	}

	count, err := HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, homeworkSubmissionDBTypes, false, homeworkSubmissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HomeworkSubmission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HomeworkSubmission: %s", err)
	}

	count, err = HomeworkSubmissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
